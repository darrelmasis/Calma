@use '../mixins/buttons' as buttons_mixins;
@use '../config/buttons' as vars;
@use '../functions/buttons' as bf;
@use 'sass:map';
@use 'sass:list';

.btn {
  @include buttons_mixins.button-initial(
    map.get(vars.$button-theme-colors, 'initial'),
    bf.get-button-state('initial', 'main'),
    bf.get-button-state('initial', 'main-hover'),
    bf.get-button-state('initial', 'main-active'),
    bf.get-button-state('initial', 'text-color')
  );

  --btn-padding: #{vars.$btn-padding-y} #{vars.$btn-padding-x};
  --btn-font-size: #{vars.$btn-normal-fs};
  --btn-line-height: #{vars.$btn-line-height};

  --btn-padding-square: #{vars.$btn-padding-y};
  --btn-square-size: #{vars.$btn-square-size};

  // Bordes
  --btn-border: 0;
  --btn-border-disabled: 0;
  --btn-border-radius: #{vars.$btn-border-radius};

  display: inline-flex;
  align-items: center;
  justify-content: center;
  vertical-align: middle;
  box-sizing: border-box;
  padding: var(--btn-padding);
  gap: 0.5rem;
  font-size: var(--btn-font-size);
  line-height: var(--btn-line-height);
  cursor: pointer;
  border: var(--btn-border);
  border-radius: var(--btn-border-radius);
  background-color: var(--btn-bg);
  color: var(--btn-color);
  transition: all 0.2s;
  user-select: none;
  // min-width: var(--btn-min-width);

  &:hover {
    background-color: var(--btn-bg-hover);
    color: var(--btn-color-hover);
    // transform: scale(1.02);
  }

  &:active {
    background-color: var(--btn-bg-active);
    // transform: scale(1);
  }

  &.ghost-active {
    background-color: var(--btn-ghost-bg-active);
    color: var(--btn-ghost-color-active);
    border: var(--btn-border);
  }

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    user-select: none;
    pointer-events: none;
  }

  &-icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-size: var(--btn-font-size);
  }

  &-label {
    display: inline-flex;
    align-items: center;
  }

  &-square {
    aspect-ratio: 1;
    padding: var(--btn-padding-square);

    & > span {
      height: var(--btn-square-size);
      width: var(--btn-square-size);
      display: inline-flex;
      align-items: center;
      justify-content: center;
    }
  }

  &-block {
    width: 100%;
    display: flex;
  }
}

@each $size, $values in vars.$buttons-sizes {
  .btn-#{$size} {
    --btn-padding: #{list.nth($values, 1)} #{list.nth($values, 2)};
    --btn-padding-square: #{list.nth($values, 1)};
    --btn-font-size: #{list.nth($values, 3)};
    --btn-line-height: #{list.nth($values, 4)};
    --btn-min-width: #{list.nth($values, 5)};
    --btn-square-size: #{list.nth($values, 6)};
    --btn-border-radius: #{list.nth($values, 7)};
  }
}

@each $theme, $color in vars.$button-theme-colors {
  .btn-#{$theme} {
    @include buttons_mixins.button-variant(
      $color,
      bf.get-button-state($theme, 'main'),
      bf.get-button-state($theme, 'main-hover'),
      bf.get-button-state($theme, 'main-active'),
      bf.get-button-state($theme, 'text-color')
    );
  }

  .btn-#{$theme}-ghost {
    @include buttons_mixins.button-ghost-variant(
      $color,
      bf.get-button-state($theme, 'main'),
      bf.get-button-state($theme, 'main-hover-ghost'),
      bf.get-button-state($theme, 'main-active-ghost'),
      bf.get-button-state($theme, 'text-color-ghost'),
      bf.get-button-state($theme, 'text-color-ghost-hover')
    );
  }
}

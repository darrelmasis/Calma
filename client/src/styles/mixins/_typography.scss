@use '../config/typography' as typo;
@use '../functions/typography' as fn;
@use 'sass:meta';

// Aplica tamaño desde mapa
@mixin font-size($key, $fluid: false) {
  $size: fn.size($key, typo.$font-sizes);

  @if $size == null {
    @warn "El tamaño `#{$key}` no existe en $font-sizes.";
  } @else if $fluid and (meta.type-of($size) == number) {
    // Genera clamp entre 0.9x y 1.1x del valor
    font-size: fn.fluid($size * 0.9, $size * 1.1);
  } @else {
    font-size: $size;
  }
}

// Genera utilitarios fs-h1, fs-small, etc.
@mixin generate-font-size-utilities($sizes: typo.$font-sizes) {
  @each $name, $size in $sizes {
    .fs-#{'' + $name} {
      font-size: $size;
      @if ($name == 'display-1') or ($name == 'display-2') {
        font-weight: fn.weight(light, typo.$font-weights);
      }
    }
  }
}

// Pesos
@mixin generate-font-weight-utilities($weights: typo.$font-weights) {
  @each $name, $weight in $weights {
    .fw-#{'' + $name} {
      font-weight: $weight;
    }
  }
}
